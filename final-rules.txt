// Firestore Security Rules (tightest while preserving current functionality)
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() { return request.auth != null; }
    function isOwner(userId) { return isSignedIn() && request.auth.uid == userId; }
    function isParticipant() { return isSignedIn() && (request.auth.uid in resource.data.participants); }
    function willBeParticipant() { return isSignedIn() && (request.auth.uid in request.resource.data.participants); }
    function onlyChanged(keys) { return request.resource.data.diff(resource.data).changedKeys().hasOnly(keys); }
    function sameOrPlusMinusOne(field) {
      return request.resource.data[field] == resource.data[field]
        || request.resource.data[field] == resource.data[field] + 1
        || request.resource.data[field] == resource.data[field] - 1;
    }

    // Posts (read for authed users only)
    match /posts/{postId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && onlyChanged(['comments']) && sameOrPlusMinusOne('comments');
    }

    // Likes
    match /likes/{likeId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.postId is string;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // App user profile (account-level metadata)
    match /userProfiles/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }

    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Comments
    match /comments/{commentId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.profileId is string && request.resource.data.text is string;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // Messaging - Fixed to support queries properly
    match /messages/{messageId} {
      allow create: if willBeParticipant();
      allow read: if isParticipant();
      allow update: if isParticipant();
      allow delete: if isParticipant();
    }

    // Typing indicators (per-thread keys)
    match /typing/{threadKey} {
      allow read, write: if isSignedIn();
    }

    // Public-facing profiles created in-app (Search/CreateProfileScreen)
    match /profiles/{profileId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && onlyChanged(['positiveVoteCount', 'negativeVoteCount']) && sameOrPlusMinusOne('positiveVoteCount') && sameOrPlusMinusOne('negativeVoteCount');
    }

    // Per-user profile votes
    match /profileVotes/{voteId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid && request.resource.data.profileId is string && request.resource.data.voteType in ['positive','negative'];
      allow update: if isSignedIn() && resource.data.userId == request.auth.uid && request.resource.data.voteType in ['positive','negative'];
      allow delete: if isSignedIn() && resource.data.userId == request.auth.uid;
    }

    // User-organized collections
    match /userPosts/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /userComments/{userId} {
      allow read, write: if isOwner(userId);
    }
    match /likedPosts/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Push tokens
    match /userTokens/{tokenId} {
      allow read: if isSignedIn() && request.auth.uid == resource.data.userId;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && request.auth.uid == resource.data.userId;
    }

    // Reports collection
    match /reports/{reportId} {
      allow read, write: if isSignedIn();
    }

    // Blocks collection
    match /blocks/{blockId} {
      allow read: if isSignedIn() && (request.auth.uid == resource.data.blockerId || request.auth.uid == resource.data.blockedUserId);
      allow create: if isSignedIn() && request.resource.data.blockerId == request.auth.uid;
      allow update, delete: if isSignedIn() && resource.data.blockerId == request.auth.uid;
    }
  }
}

